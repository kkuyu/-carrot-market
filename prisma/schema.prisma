// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

enum EmdType {
  MAIN
  SUB
}

model User {
  id                 Int             @id @default(autoincrement())
  name               String
  phone              String          @unique
  email              String?         @unique
  avatar             String          @default("")
  concerns           String          @default("")
  emdType            EmdType
  MAIN_emdAddrNm     String
  MAIN_emdPosNm      String
  MAIN_emdPosDx      Float
  MAIN_emdPosX       Float
  MAIN_emdPosY       Float
  SUB_emdAddrNm      String?
  SUB_emdPosNm       String?
  SUB_emdPosDx       Float?
  SUB_emdPosX        Float?
  SUB_emdPosY        Float?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  tokens             Token[]
  searchRecords      SearchRecord[]
  products           Product[]
  chats              Chat[]
  chatMessages       ChatMessage[]
  stories            Story[]
  comments           StoryComment[]
  sellUserReview     ProductReview[] @relation(name: "sellUserReview")
  purchaseUserReview ProductReview[] @relation(name: "purchaseUserReview")
  manners            Manner[]
  records            Record[]
  streams            Stream[]
  messages           Message[]
}

model Token {
  id        Int      @id @default(autoincrement())
  payload   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
}

model SearchRecord {
  id        Int      @id @default(autoincrement())
  count     Int
  keyword   String
  user      User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

enum ProductCategory {
  POPULAR_PRODUCT
  DIGITAL_DEVICE
  HOME_APPLIANCES
  FURNITURE_AND_INTERIOR
  LIFE_AND_KITCHEN
  INFANT
  CHILDREN_BOOK
  FEMALE_FASHION
  FEMALE_SUNDRIES
  MALE_FASHION_AND_MALE_SUNDRIES
  BEAUTY_AND_COSMETOLOGY
  SPORTS_AND_LEISURE
  HOBBY_AND_GAME_AND_ALBUM
  BOOK
  TICKET_AND_COUPON
  PROCESSED_FOOD
  COMPANION_ANIMAL_SUPPLIES
  PLANT
  ETC
  SEEK
}

model Product {
  id          Int             @id @default(autoincrement())
  photos      String          @default("") @db.Text
  name        String
  category    ProductCategory
  price       Int
  description String          @db.MediumText
  emdAddrNm   String
  emdPosNm    String
  emdPosX     Float
  emdPosY     Float
  resumeCount Float           @default(0)
  resumeAt    DateTime
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  reviews     ProductReview[]
  chats       Chat[]
  records     Record[]
}

model Chat {
  id           Int           @id @default(autoincrement())
  users        User[]
  product      Product?      @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId    Int?
  chatMessages ChatMessage[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt()
}

model ChatMessage {
  id        Int      @id @default(autoincrement())
  text      String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

enum StoryCategory {
  POPULAR_STORY
  QUESTION
  INCIDENT
  REPORT
  RESTAURANT
  DILETTANTE_LIFE
  DAILY
  MISSING_AND_DISAPPEAR
  ENTRUST
  PHOTO_EXHIBIT
}

model Story {
  id        Int            @id @default(autoincrement())
  photos    String         @default("") @db.Text
  category  StoryCategory
  content   String         @db.MediumText
  emdAddrNm String
  emdPosNm  String
  emdPosX   Float
  emdPosY   Float
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  comments  StoryComment[]
  records   Record[]
}

model StoryComment {
  id             Int            @id @default(autoincrement())
  depth          Int            @default(0)
  content        String         @db.MediumText
  emdAddrNm      String
  emdPosNm       String
  emdPosX        Float
  emdPosY        Float
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int
  story          Story          @relation(fields: [storyId], references: [id], onDelete: Cascade)
  storyId        Int
  records        Record[]
  reComments     StoryComment[] @relation(name: "reComment")
  reCommentRef   StoryComment?  @relation(name: "reComment", fields: [reCommentRefId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  reCommentRefId Int?
}

model Manner {
  id        Int             @id @default(autoincrement())
  value     String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt()
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  reviews   ProductReview[]
}

model ProductReview {
  id             Int      @id @default(autoincrement())
  role           String
  satisfaction   String
  manners        Manner[]
  text           String?  @db.MediumText
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  sellUser       User     @relation(name: "sellUserReview", fields: [sellUserId], references: [id], onDelete: Cascade)
  sellUserId     Int
  purchaseUser   User     @relation(name: "purchaseUserReview", fields: [purchaseUserId], references: [id], onDelete: Cascade)
  purchaseUserId Int
  product        Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId      Int
}

enum Kind {
  ProductLike
  ProductSale
  ProductPurchase
  StoryLike
  CommentLike
}

enum Emotion {
  Like
  Love
  Haha
  Wow
  Sad
  Angry
}

model Record {
  id        Int           @id @default(autoincrement())
  kind      Kind
  emotion   Emotion?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product?      @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int?
  story     Story?        @relation(fields: [storyId], references: [id], onDelete: Cascade)
  storyId   Int?
  comment   StoryComment? @relation(fields: [commentId], references: [id])
  commentId Int?
}

model Stream {
  id            Int       @id @default(autoincrement())
  name          String
  description   String    @db.MediumText
  price         Int
  cloudflareId  String
  cloudflareUrl String
  cloudflareKey String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  messages      Message[]
}

model Message {
  id        Int      @id @default(autoincrement())
  message   String   @db.MediumText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  stream    Stream   @relation(fields: [streamId], references: [id], onDelete: Cascade)
  streamId  Int
}
