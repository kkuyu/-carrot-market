// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

enum EmdType {
  MAIN
  SUB
}

model User {
  id              Int         @id @default(autoincrement())
  name            String
  phone           String      @unique
  email           String?     @unique
  avatar          String?
  emdType         EmdType
  MAIN_emdAddrNm  String
  MAIN_emdPosNm   String
  MAIN_emdPosDx   Float
  MAIN_emdPosX    Float
  MAIN_emdPosY    Float
  SUB_emdAddrNm   String?
  SUB_emdPosNm    String?
  SUB_emdPosDx    Float?
  SUB_emdPosX     Float?
  SUB_emdPosY     Float?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  tokens          Token[]
  products        Product[]
  stories         Story[]
  comments        Comment[]
  curiosities     Curiosity[]
  emotions        Emotion[]
  writtenReviews  Review[]    @relation(name: "writtenReviews")
  receivedReviews Review[]    @relation(name: "receivedReviews")
  records         Record[]
  streams         Stream[]
  messages        Message[]
}

model Token {
  id        Int      @id @default(autoincrement())
  payload   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
}

model Product {
  id          Int      @id @default(autoincrement())
  photos      String   @default("") @db.Text
  name        String
  category    String
  price       Int
  description String   @db.MediumText
  emdAddrNm   String
  emdPosNm    String
  emdPosX     Float
  emdPosY     Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  records     Record[]
}

model Story {
  id          Int         @id @default(autoincrement())
  photos      String      @default("") @db.Text
  category    String
  content     String      @db.MediumText
  emdAddrNm   String
  emdPosNm    String
  emdPosX     Float
  emdPosY     Float
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  comments    Comment[]
  curiosities Curiosity[]
  emotions    Emotion[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  comment   String   @db.MediumText
  emdAddrNm String
  emdPosNm  String
  emdPosX   Float
  emdPosY   Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  story     Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  storyId   Int
}

model Curiosity {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  story     Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  storyId   Int
}

enum Feeling {
  Like
  Love
  Haha
  Wow
  Sad
  Angry
}

model Emotion {
  id        Int      @id @default(autoincrement())
  feeling   Feeling
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  story     Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  storyId   Int
}

model Review {
  id           Int      @id @default(autoincrement())
  review       String   @db.MediumText
  score        Int      @default(1)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdBy    User     @relation(name: "writtenReviews", fields: [createdById], references: [id], onDelete: Cascade)
  createdById  Int
  createdFor   User     @relation(name: "receivedReviews", fields: [createdForId], references: [id], onDelete: Cascade)
  createdForId Int
}

enum Kind {
  Favorite
  Sale
  Purchase
}

model Record {
  id        Int      @id @default(autoincrement())
  kind      Kind
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
}

model Stream {
  id            Int       @id @default(autoincrement())
  name          String
  description   String    @db.MediumText
  price         Int
  cloudflareId  String
  cloudflareUrl String
  cloudflareKey String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  messages      Message[]
}

model Message {
  id        Int      @id @default(autoincrement())
  message   String   @db.MediumText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  stream    Stream   @relation(fields: [streamId], references: [id], onDelete: Cascade)
  streamId  Int
}
